from pyrogram import Client, filters
from pyrogram.types import Message, CallbackQuery
from typing import Dict

from database import Database
from states import State
from keyboards import main_menu, task_inline_keyboard, back_menu
from dotenv import load_dotenv

import os

load_dotenv()

app = Client(
    "task_manager_bot",
    api_id=os.getenv("API_ID"),
    api_hash=os.getenv("API_HASH"),
    bot_token=os.getenv("BOT_TOKEN")
)

db = Database()
user_states: Dict[int, State] = {}
temp_data: Dict[int, Dict] = {}

@app.on_message(filters.command("start"))
def start(client: Client, message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.

    :param client: –ö–ª–∏–µ–Ω—Ç Pyrogram.
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    user_id = message.from_user.id
    user = db.get_user(user_id)

    if user:
        message.reply_text(
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!",
            reply_markup=main_menu()
        )
    else:
        message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        user_states[user_id] = State.REGISTRATION_NAME

@app.on_message(filters.text & ~filters.regex(r'^/'))
def handle_text(client: Client, message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

    :param client: –ö–ª–∏–µ–Ω—Ç Pyrogram.
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    user_id = message.from_user.id
    state = user_states.get(user_id, State.NONE)
    text = message.text.strip()

    if state == State.REGISTRATION_NAME:
        temp_data[user_id] = {"name": text}
        message.reply_text("–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω:")
        user_states[user_id] = State.REGISTRATION_LOGIN

    elif state == State.REGISTRATION_LOGIN:
        if db.is_login_unique(text):
            temp_data[user_id]["login"] = text
            db.add_user(user_id, temp_data[user_id]["name"], temp_data[user_id]["login"])
            message.reply_text(
                "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
                reply_markup=main_menu()
            )
            user_states[user_id] = State.NONE
            temp_data.pop(user_id, None)
        else:
            message.reply_text("–≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")

    elif text == "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É":
        message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        user_states[user_id] = State.CREATE_TASK_TITLE

    elif text == "–ú–æ–∏ –∑–∞–¥–∞—á–∏":
        tasks = db.get_tasks(user_id)
        if tasks:

            message.reply_text(
                "–í–∞—à–∏ –∑–∞–¥–∞—á–∏:",
                reply_markup=back_menu()
            )
            for task in tasks:
                task_id, title, description, status = task
                message.reply_text(
                    f"**{title}**\n{description}\n–°—Ç–∞—Ç—É—Å: {status}",
                    reply_markup=task_inline_keyboard(task_id, status)
                )
        else:
            message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.", reply_markup=back_menu())


    elif text == "üîô –ù–∞–∑–∞–¥":
        message.reply_text(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=main_menu()
        )

    elif state == State.CREATE_TASK_TITLE:
        temp_data[user_id] = {"title": text}
        message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        user_states[user_id] = State.CREATE_TASK_DESCRIPTION

    elif state == State.CREATE_TASK_DESCRIPTION:
        temp_data[user_id]["description"] = text
        db.add_task(user_id, temp_data[user_id]["title"], temp_data[user_id]["description"])
        message.reply_text(
            "–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
            reply_markup=main_menu()
        )
        user_states[user_id] = State.NONE
        temp_data.pop(user_id, None)

    else:
        message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.",
            reply_markup=main_menu()
        )

@app.on_callback_query()
def handle_callback_query(client: Client, callback_query: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏.

    :param client: –ö–ª–∏–µ–Ω—Ç Pyrogram.
    :param callback_query: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞.
    """
    data = callback_query.data
    user_id = callback_query.from_user.id

    if data.startswith("complete_"):
        task_id = int(data.split("_")[1])
        db.complete_task(task_id)

        task = db.get_task_by_id(task_id)
        if task:
            _, _, title, description, status = task

            callback_query.message.edit_text(
                f"**{title}**\n{description}\n–°—Ç–∞—Ç—É—Å: {status}",
                reply_markup=task_inline_keyboard(task_id, status)
            )
        callback_query.answer("–ó–∞–¥–∞—á–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")

        callback_query.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=back_menu()
        )

    elif data.startswith("delete_"):
        task_id = int(data.split("_")[1])
        db.delete_task(task_id)
        callback_query.message.delete()
        callback_query.answer("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.")

        callback_query.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=back_menu()
        )


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run()